const parseStoredArray = (value) => {
  if (!value) {
    return [];
  }
  try {
    const parsed = JSON.parse(value);
    return Array.isArray(parsed) ? parsed : [];
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ sessionStorage', error);
    return [];
  }
};

document.addEventListener('DOMContentLoaded', () => {
  const leftPlayersContainer = document.querySelector('.roles-players--left');
  const rightPlayersContainer = document.querySelector('.roles-players--right');
  const turnStatus = document.querySelector('.game-turn__label');
  const noteStatus = document.querySelector('.game-turn__note');
  const finishBtn = document.querySelector('.game-finish-link');

  const deckDefinitions = {
    'main-1': [
      { id: 1, question: '–ö–∞–∫–∞—è —Ç–≤–æ—è —Å–∞–º–∞—è –≤–µ–¥—å–º–æ–≤—Å–∫–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏?' },
      {
        id: 2,
        question: '–°–ª—É—á–∞–ª–æ—Å—å –ª–∏ —Ç–µ–±–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Ä—ã ‚Äî —Ñ–ª–∏—Ä—Ç, –≤–∑–≥–ª—è–¥, —Å–ª–æ–≤–∞ ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—à—å?',
      },
      { id: 3, question: '–ö–∞–∫–æ–µ —Ç–≤–æ—ë –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ –ª—é–±–æ–≥–æ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Ç—É–∞–ª–∞?' },
      { id: 4, question: '–ö–∞–∫–∞—è —Ç–∞–π–Ω–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ –¥–æ —Å–∏—Ö –ø–æ—Ä —à–µ–ø—á–µ—Ç —Ç–µ–±–µ –Ω–∞ —É—Ö–æ?' },
      { id: 5, question: '–ö–∞–∫–æ–π –ø–æ—Å—Ç—É–ø–æ–∫ —Ç—ã –±—ã —Å—Ç–µ—Ä–ª–∞ –∏–∑ –ø–∞–º—è—Ç–∏ –¥—Ä—É–≥–∏—Ö, –µ—Å–ª–∏ –±—ã –º–æ–≥–ª–∞?' },
      { id: 6, question: '–ß—Ç–æ —Ç–µ–±—è –º–æ–∂–µ—Ç —Å–≤–µ—Å—Ç–∏ —Å —É–º–∞ ‚Äî –≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ –∏–ª–∏ –≤–ª–∞—Å—Ç—å?' },
      { id: 7, question: '–ö–∞–∫–∞—è —ç–º–æ—Ü–∏—è –≤ —Ç–µ–±–µ —Å–∞–º–∞—è —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω–∞—è?' },
      { id: 8, question: '–ö–∞–∫–æ–µ –∂–µ–ª–∞–Ω–∏–µ —Ç—ã –ø—Ä—è—á–µ—à—å, –¥–∞–∂–µ –æ—Ç —Å–∞–º–æ–π —Å–µ–±—è?' },
      {
        id: 9,
        question: '–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥–ª–∞ –∑–∞–∫–æ–ª–¥–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –∫—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª –∏ —á—Ç–æ –±—ã —Ç—ã —Å –Ω–∏–º —Å–¥–µ–ª–∞–ª–∞?',
      },
      { id: 10, question: '–ó–∞ —á—Ç–æ —Ç—ã –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –æ—Å—É–∂–¥–µ–Ω–∞ –Ω–∞ –≤–µ–¥—å–º–æ–≤—Å–∫–æ–º —Å—É–¥–µ?' },
      {
        id: 11,
        question: '–ö—Ç–æ –∏–∑ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—Å–ª—É–∂–∏–ª –±—ã —Å—Ç–∞—Ç—å —Ç–≤–æ–∏–º ‚Äú—Å–æ-–∑–∞–≥–æ–≤–æ—Ä—â–∏–∫–æ–º‚Äù –∏ –ø–æ—á–µ–º—É?',
      },
      { id: 12, question: '–ö–∞–∫–æ–µ —Ç–≤–æ—ë —Å–∞–º–æ–µ —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ä—É–∂–∏–µ?' },
      { id: 13, question: '–ö–æ–≥–¥–∞ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –º–∞–≥–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π?' },
      { id: 14, question: '–ö–∞–∫–∞—è —Ç–≤–æ—è —Ç—ë–º–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ —Ç–µ–±–µ –¥–∞–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?' },
      {
        id: 15,
        question: '–ë—ã–ª –ª–∏ —á–µ–ª–æ–≤–µ–∫, –æ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –¥—É–º–∞–ª–∞: ‚Äú–Ø –º–æ–≥–ª–∞ –±—ã —Ä–∞–∑—Ä—É—à–∏—Ç—å –µ–≥–æ –∂–∏–∑–Ω—å ‚Äî –∏ —ç—Ç–æ –±—ã–ª–æ –±—ã –∫—Ä–∞—Å–∏–≤–æ‚Äù?',
      },
      { id: 16, question: '–ß—Ç–æ —Ç—ã –¥–µ–ª–∞–ª–∞ –Ω–æ—á—å—é, –æ —á—ë–º –ª—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–ª–Ω—Ü—É?' },
      { id: 17, question: '–ö–∞–∫–∞—è ‚Äú–∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è‚Äù —Ñ–∞–Ω—Ç–∞–∑–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ç–µ–±–µ —á–∞—â–µ –≤—Å–µ–≥–æ?' },
      {
        id: 18,
        question: '–ö–∞–∫–æ–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç —Ç–µ–±–µ —Ö–æ—á–µ—Ç—Å—è —É—Å–ª—ã—à–∞—Ç—å —á–∞—â–µ, –Ω–æ —Ç—ã –±–æ–∏—à—å—Å—è –ø—Ä–∏–∑–Ω–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º?',
      },
      { id: 19, question: '–ß—Ç–æ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —Å–≤–æ–∏–º —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º –∏—Å–∫—É—à–µ–Ω–∏–µ–º?' },
      {
        id: 20,
        question: '–ï—Å–ª–∏ –±—ã —Ç–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –±—ã–ª –∑–µ–ª—å–µ–º ‚Äî –∫–∞–∫–∏–µ —Ç—Ä–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –≤ –Ω—ë–º –±—ã–ª–∏ –±—ã?',
      },
      {
        id: 21,
        question: '–ß—Ç–æ –≤ —Ç–µ–±–µ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –ª—é–¥–µ–π —Ç—è–Ω—É—Ç—å—Å—è –∫ —Ç–µ–±–µ ‚Äî –∏ –æ—Ç–¥–∞–ª—è—Ç—å—Å—è?',
      },
      { id: 22, question: '–ï—Å—Ç—å –ª–∏ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –º—ã—Å–ª–µ–Ω–Ω–æ –ø—Ä–æ–∫–ª—è–ª–∞? –°—Ä–∞–±–æ—Ç–∞–ª–æ?' },
      {
        id: 23,
        question: '–ö–∞–∫–∞—è —á–∞—Å—Ç—å —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã—à–ª–æ –∏–∑-–ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—è?',
      },
      {
        id: 24,
        question: '–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥–ª–∞ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ, –Ω–µ –ø–æ—Ç–µ—Ä—è–≤ —É—Ä–æ–∫ ‚Äî —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ?',
      },
      { id: 25, question: '–ö–∞–∫—É—é –∫–ª—è—Ç–≤—É —Ç—ã –¥–∞–ª–∞ —Å–µ–±–µ ‚Äî –∏ –Ω–∞—Ä—É—à–∏–ª–∞?' },
      {
        id: 26,
        question: '–ö–æ–≥–æ –∏–∑ –±—ã–≤—à–∏—Ö —Ç—ã –±—ã –≤—ã–∑–≤–∞–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ ‚Äî –Ω–µ —Ä–∞–¥–∏ –ª—é–±–≤–∏, –∞ —Ä–∞–¥–∏ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞?',
      },
      {
        id: 27,
        question: '–ß—Ç–æ —Ç—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –¥–µ–ª–∞–ª–∞, –∑–Ω–∞—è, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑—Ä—É—à–∏—Ç ‚Äî –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–ª–∞?',
      },
      { id: 28, question: '–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª–∞ –±—ã, –µ—Å–ª–∏ –±—ã –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–ª?' },
      {
        id: 29,
        question: '–ö–æ–≥–¥–∞ —Ç—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø—Ä–∏—Ç–≤–æ—Ä—è–ª–∞—Å—å, —á—Ç–æ —Ç–µ–±–µ –≤—Å—ë —Ä–∞–≤–Ω–æ ‚Äî —Ö–æ—Ç—è –Ω–µ –±—ã–ª–æ?',
      },
      {
        id: 30,
        question: '–ö–æ–º—É –∏–∑ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç—ã –±—ã –¥–æ–≤–µ—Ä–∏–ª–∞ —Ç–∞–π–Ω—É, —Å–ø–æ—Å–æ–±–Ω—É—é —Ç–µ–±—è —Ä–∞–∑—Ä—É—à–∏—Ç—å?',
      },
      { id: 31, question: '–ß—Ç–æ –≤ —Ç–µ–±–µ —Å–∞–º–æ–µ –æ–ø–∞—Å–Ω–æ–µ ‚Äî —Ç–≤–æ–π —É–º, —Ç–µ–ª–æ –∏–ª–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å?' },
      { id: 32, question: '–ö–æ–≥–¥–∞ —Ç—ã –±—ã–ª–∞ —Å–∞–º–æ–π –∂–µ—Å—Ç–æ–∫–æ–π ‚Äî –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–ª–∞—Å—å —ç—Ç–∏–º?' },
      { id: 33, question: '–ß—Ç–æ —Ç—ã —É–∫—Ä–∞–ª–∞ ‚Äî –±—É–∫–≤–∞–ª—å–Ω–æ –∏–ª–∏ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏ ‚Äî –∏ –Ω–µ –ø–æ–∂–∞–ª–µ–ª–∞?' },
      { id: 34, question: '–ß—Ç–æ —Ç–µ–±–µ –ª–µ–≥—á–µ: –º–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø–æ–¥–¥–∞–≤–∞—Ç—å—Å—è?' },
      {
        id: 35,
        question: '–ö–æ–≥–¥–∞ —Ç—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞, —á—Ç–æ –∫—Ç–æ-—Ç–æ —á–∏—Ç–∞–µ—Ç —Ç–µ–±—è, –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–Ω–∏–≥—É ‚Äî –∏ —ç—Ç–æ –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ?',
      },
      { id: 36, question: '–ß—Ç–æ —Ç—ã —Å–∫—Ä—ã–≤–∞–µ—à—å –ø–æ–¥ –æ–±—Ä–∞–∑–æ–º ¬´–≤—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º¬ª?' },
      {
        id: 37,
        question: '–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ –≤–µ—Ä–Ω—É—Ç—å: —á–µ–ª–æ–≤–µ–∫–∞, —á—É–≤—Å—Ç–≤–æ –∏–ª–∏ –º–æ–º–µ–Ω—Ç?',
      },
      {
        id: 38,
        question: '–ö–æ–≥–¥–∞ —Ç—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –Ω–∞—Ä–æ—á–Ω–æ —Å–¥–µ–ª–∞–ª–∞ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–∞–¥–∏ –≤–∫—É—Å–∞ –≥—Ä–µ—Ö–∞?',
      },
      { id: 39, question: '–ß—Ç–æ —Ç–µ–±—è –≤–æ–∑–±—É–∂–¥–∞–µ—Ç —Å–∏–ª—å–Ω–µ–µ ‚Äî –≤–ª–∞—Å—Ç—å –∏–ª–∏ –ø–æ–∫–æ—Ä–Ω–æ—Å—Ç—å?' },
      { id: 40, question: '–ß—Ç–æ –±—ã —Ç—ã —Å–∫–∞–∑–∞–ª–∞ —Å–µ–±–µ –¥–µ—Å—è—Ç—å –ª–µ—Ç –Ω–∞–∑–∞–¥?' },
      {
        id: 41,
        question: '–ö–∞–∫–æ–µ –∂–µ–ª–∞–Ω–∏–µ —Ç—ã –¥–æ–ª–≥–æ –Ω–∞–∑—ã–≤–∞–ª–∞ ¬´–≥–ª—É–ø–æ—Å—Ç—å—é¬ª, –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω—è–ª–∞, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?',
      },
      {
        id: 42,
        question: '–ï—Å–ª–∏ –±—ã –õ—É–Ω–∞ –º–æ–≥–ª–∞ –∑–∞–¥–∞—Ç—å —Ç–µ–±–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å ‚Äî —á–µ–≥–æ –±—ã —Ç—ã –±–æ—è–ª–∞—Å—å —É—Å–ª—ã—à–∞—Ç—å?',
      },
      { id: 43, question: '–ß—Ç–æ –≤ —Ç–µ–±–µ ‚Äî –¥–∞—Ä, –∞ —á—Ç–æ ‚Äî –ø—Ä–æ–∫–ª—è—Ç—å–µ?' },
      {
        id: 44,
        question: '–ö–æ–≥–¥–∞ —Ç—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞ —Å–µ–±—è –Ω–∞—Å—Ç–æ—è—â–µ–π –≤–µ–¥—å–º–æ–π ‚Äî —É–≤–µ—Ä–µ–Ω–Ω–æ–π, –∂–µ–ª–∞–Ω–Ω–æ–π –∏ —á—É—Ç—å –æ–ø–∞—Å–Ω–æ–π?',
      },
      { id: 45, question: '–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è ¬´—Å–≤—è—â–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç¬ª, –æ –∫–æ—Ç–æ—Ä–æ–º –Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç?' },
      { id: 46, question: '–õ—é–±–æ–≤—å –±–µ–∑ —Å—Ç—Ä–∞—Å—Ç–∏ ‚ù§Ô∏è –∏–ª–∏ —Å—Ç—Ä–∞—Å—Ç—å –±–µ–∑ –ª—é–±–≤–∏ üî•?' },
      { id: 47, question: '–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –±—É–¥—É—â–µ–µ ‚Äî –∏–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø—Ä–æ—à–ª–æ–µ?' },
      { id: 48, question: '–í–ª–∞—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–¥ –¥—Ä—É–≥–∏–º–∏ ‚Äî –∏–ª–∏ –Ω–∞–¥ —Å–æ–±–æ–π?' },
      { id: 49, question: '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—à–∏–±–∞—Ç—å—Å—è ‚Äî –∏–ª–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç—å –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å?' },
      { id: 50, question: '–ü—Ä–∏–∑–Ω–∞—Ç—å—Å—è –≤ –≥—Ä–µ—Ö–µ ‚Äî –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ–≥–æ –µ—â—ë —Ä–∞–∑?' },
      { id: 51, question: '–°–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–¥—É ‚Äî –∏–ª–∏ –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ –∫—Ä–∞—Å–∏–≤—É—é –ª–æ–∂—å?' },
      { id: 52, question: '–°–ø–∞—Å—Ç–∏ –ª—é–±–æ–≤—å ‚Äî –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–±–æ–¥—É?' },
      { id: 53, question: '–î–µ–ª–∞—Ç—å –±–æ–ª—å–Ω–æ ‚Äî –∏–ª–∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –±–æ–ª—å?' },
      { id: 54, question: '–°–¥–∞—Ç—å—Å—è ‚Äî –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –≤–∏–¥, —á—Ç–æ —Ç—ã –Ω–µ —Ö–æ—Ç–µ–ª–∞ –ø–æ–±–µ–¥—ã?' },
      { id: 55, question: '–ü—Ä–æ—Å—Ç–∏—Ç—å ‚Äî –∏–ª–∏ –Ω–∞–±–ª—é–¥–∞—Ç—å, –∫–∞–∫ —Å—É–¥—å–±–∞ –º—Å—Ç–∏—Ç –∑–∞ —Ç–µ–±—è?' },
      { id: 56, question: '–°—Ç–∞—Ç—å –ª–µ–≥–µ–Ω–¥–æ–π ‚Äî –∏–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–∞–π–Ω–æ–π?' },
      {
        id: 57,
        question: '–ü–æ–ª—É—á–∏—Ç—å –≤—Å—ë ‚Äî –Ω–æ –ø–æ—Ç–µ—Ä—è—Ç—å –≤–∫—É—Å –∫ –∏–≥—Ä–µ, –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å ‚Äî –∏ —Å–º–µ—è—Ç—å—Å—è?',
      },
      { id: 58, question: '–û—Ç–¥–∞—Ç—å —Å–∏–ª—É –∑–∞ –ª—é–±–æ–≤—å ‚Äî –∏–ª–∏ –ª—é–±–æ–≤—å –∑–∞ —Å–∏–ª—É?' },
      {
        id: 59,
        question: '–ñ–µ—Ä—Ç–≤–æ–≤–∞—Ç—å —Å–æ–±–æ–π —Ä–∞–¥–∏ –¥—Ä—É–≥–∏—Ö ‚Äî –∏–ª–∏ –ø–æ–∑–≤–æ–ª—è—Ç—å –¥—Ä—É–≥–∏–º –∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–¥–∏ —Ç–µ–±—è?',
      },
      { id: 60, question: '–û—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ç–µ–Ω–∏ ‚Äî –∏–ª–∏ –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤–µ—Ç –∏ —Å–≥–æ—Ä–µ—Ç—å?' },
      { id: 61, question: '–ß—Ç–æ –±—ã —Ç—ã –≤—ã–±—Ä–∞–ª–∞ ‚Äî –∑–Ω–∞—Ç—å –≤—Å—ë –∏–ª–∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å—ë?' },
      {
        id: 62,
        question: '–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥–ª–∞ –ø–µ—Ä–µ—Ä–æ–¥–∏—Ç—å—Å—è –≤–µ–¥—å–º–æ–π –≤ –¥—Ä—É–≥–æ–π —ç–ø–æ—Ö–µ ‚Äî –∫–∞–∫—É—é –±—ã –≤—ã–±—Ä–∞–ª–∞?',
      },
    ],
  };

  const deckStates = new Map();

  if (!leftPlayersContainer || !rightPlayersContainer || !turnStatus || !finishBtn) {
    return;
  }

  const storedNames = parseStoredArray(sessionStorage.getItem('covenPlayers')).map((name) =>
    typeof name === 'string' ? name.trim() : ''
  );
  const storedAssignments = parseStoredArray(sessionStorage.getItem('covenAssignments'));

  if (storedNames.length === 0) {
    window.location.replace('players.html');
    return;
  }

  const playersData = storedNames.map((name, index) => {
    const assignment =
      typeof storedAssignments[index] === 'object' && storedAssignments[index] !== null
        ? storedAssignments[index]
        : {};
    const roleTitle = typeof assignment.roleTitle === 'string' ? assignment.roleTitle.trim() : '';
    const roleSummary = typeof assignment.roleSummary === 'string' ? assignment.roleSummary.trim() : '';
    const roleDetails =
      assignment.roleDetails && typeof assignment.roleDetails === 'object'
        ? assignment.roleDetails
        : null;

    return {
      name,
      roleTitle,
      roleSummary,
      roleDetails,
    };
  });

  const hasAllRoles = playersData.every((player) => player.roleTitle.length > 0);
  if (!hasAllRoles) {
    window.location.replace('roles.html');
    return;
  }

  const createPlayerElement = (player, index) => {
    const article = document.createElement('article');
    article.className = 'roles-player game-player is-complete';
    article.dataset.playerIndex = String(index);

    const scoreWrapper = document.createElement('div');
    scoreWrapper.className = 'game-player__score';

    const decreaseBtn = document.createElement('button');
    decreaseBtn.type = 'button';
    decreaseBtn.className = 'game-player__score-button game-player__score-button--decrease';
    decreaseBtn.setAttribute('aria-label', `–û—Ç–Ω—è—Ç—å –±–∞–ª–ª —É ${player.name}`);
    decreaseBtn.textContent = '‚àí';

    const orb = document.createElement('div');
    orb.className = 'roles-player__orb';

    const scoreValue = document.createElement('span');
    scoreValue.className = 'game-player__score-value';
    scoreValue.textContent = '0';
    scoreValue.setAttribute('aria-live', 'polite');

    orb.append(scoreValue);

    const increaseBtn = document.createElement('button');
    increaseBtn.type = 'button';
    increaseBtn.className = 'game-player__score-button game-player__score-button--increase';
    increaseBtn.setAttribute('aria-label', `–î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª ${player.name}`);
    increaseBtn.textContent = '+';

    scoreWrapper.append(decreaseBtn, orb, increaseBtn);

    const nameEl = document.createElement('p');
    nameEl.className = 'roles-player__name';
    nameEl.textContent = player.name;

    const roleEl = document.createElement('p');
    roleEl.className = 'roles-player__role';
    roleEl.textContent = player.roleTitle;
    if (player.roleSummary?.length > 0) {
      roleEl.setAttribute('data-hint', player.roleSummary);
    }

    article.append(scoreWrapper, nameEl, roleEl);

    return {
      element: article,
      scoreValue,
      decreaseBtn,
      increaseBtn,
    };
  };

  const midpoint = playersData.length <= 3 ? playersData.length : Math.ceil(playersData.length / 2);

  const players = playersData.map((player, index) => {
    const playerElement = createPlayerElement(player, index);
    const targetContainer = index < midpoint ? leftPlayersContainer : rightPlayersContainer;
    targetContainer.append(playerElement.element);
    return playerElement;
  });

  if (rightPlayersContainer.childElementCount > 0) {
    const stage = document.querySelector('.game-stage');
    stage?.classList.add('roles-stage--split');
  }

  const getRandomIntInclusive = (min, max) => {
    const minCeil = Math.ceil(min);
    const maxFloor = Math.floor(max);
    return Math.floor(Math.random() * (maxFloor - minCeil + 1)) + minCeil;
  };

  const drawCardFromDeck = (deckId) => {
    const deck = deckDefinitions[deckId];
    if (!Array.isArray(deck) || deck.length === 0) {
      return null;
    }

    let state = deckStates.get(deckId);
    if (!state || state.remaining.length === 0) {
      state = {
        remaining: deck.slice(),
      };
    }

    const { remaining } = state;
    if (!Array.isArray(remaining) || remaining.length === 0) {
      return null;
    }

    const randomIndex = getRandomIntInclusive(0, remaining.length - 1);
    const [card] = remaining.splice(randomIndex, 1);
    deckStates.set(deckId, { remaining });

    return card ?? null;
  };

  let activePlayerIndex = 0;
  const scores = players.map(() => 0);
  let turnsUntilEvent = getRandomIntInclusive(3, 6);
  let currentEvent = null;
  const finishThreshold = 100;
  let finishNote = '';
  let lastOpenedDeckType = null;

  const auxiliaryDecks = Array.from(document.querySelectorAll(
    '.game-deck--auxiliary'
  ));

  const renderNote = () => {
    const parts = [];
    if (currentEvent) {
      const eventLabel =
        currentEvent === 'ritual' ? '–í—Ä–µ–º—è —Ä–∏—Ç—É–∞–ª–∞' : '–í—Ä–µ–º—è —Ä–∞–∑–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∫—É';
      parts.push(`${eventLabel}! –í–æ–∑—å–º–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–ª–æ–¥—ã.`);
    }
    if (finishNote) {
      parts.push(finishNote);
    }

    if (noteStatus) {
      noteStatus.textContent = parts.join(' ‚Ä¢ ');
    }

    auxiliaryDecks.forEach((deck) => {
      const isRitualDeck = deck.classList.contains('game-deck--aux-1');
      const isMysteryDeck = deck.classList.contains('game-deck--aux-2');
      const shouldHighlight =
        (currentEvent === 'ritual' && isRitualDeck) ||
        (currentEvent === 'mystery' && isMysteryDeck);
      deck.classList.toggle('game-deck--highlight', shouldHighlight);
    });
  };

  const updateTurnStatus = () => {
    const active = playersData[activePlayerIndex];
    if (active?.name) {
      turnStatus.textContent = `–°–µ–π—á–∞—Å —Ö–æ–¥: ${active.name}`;
    } else {
      turnStatus.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º';
    }
    renderNote();
  };

  const setActivePlayer = (index) => {
    activePlayerIndex = index;
    players.forEach((player, playerIndex) => {
      player.element.classList.toggle('is-active', playerIndex === index);
    });
    updateTurnStatus();
  };

  const updateFinishButton = (triggerIndex = null) => {
    const hasThreshold = scores.some((score) => score >= finishThreshold);
    if (!hasThreshold) {
      if (!finishBtn.hidden) {
        finishBtn.hidden = true;
      }
      finishNote = '';
      renderNote();
      return;
    }

    if (triggerIndex !== null && playersData[triggerIndex]) {
      finishNote = `${playersData[triggerIndex].name} –Ω–∞–±—Ä–∞–≤(–ª–∞) ${finishThreshold} –±–∞–ª—ñ–≤! –ú–æ–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.`;
    }
    if (!finishNote) {
      finishNote = `–•—Ç–æ—Å—å –Ω–∞–±—Ä–∞–≤ ${finishThreshold} –±–∞–ª—ñ–≤. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.`;
    }

    finishBtn.hidden = false;

    renderNote();
  };

  const adjustScore = (playerIndex, delta) => {
    if (!Number.isInteger(playerIndex) || playerIndex < 0 || playerIndex >= scores.length) {
      return;
    }
    const current = scores[playerIndex];
    const nextScore = Math.max(0, current + delta);
    if (current === nextScore) {
      return;
    }
    scores[playerIndex] = nextScore;
    const scoreLabel = players[playerIndex]?.scoreValue;
    if (scoreLabel) {
      scoreLabel.textContent = String(nextScore);
    }
    updateFinishButton(delta > 0 && nextScore >= finishThreshold ? playerIndex : null);
  };

  players.forEach((player, index) => {
    player.element.addEventListener('click', (event) => {
      if (event.target instanceof HTMLElement && event.target.closest('.game-player__score-button')) {
        return;
      }
      setActivePlayer(index);
    });

    player.decreaseBtn.addEventListener('click', (event) => {
      event.stopPropagation();
      adjustScore(index, -1);
    });

    player.increaseBtn.addEventListener('click', (event) => {
      event.stopPropagation();
      adjustScore(index, 1);
    });
  });

  const deckPopup = document.querySelector('.game-deck-popup');
  const deckButtons = document.querySelectorAll('[data-game-deck]');
  const deckPopupTitle = deckPopup?.querySelector('[data-deck-field="title"]');
  const deckPopupTasks = deckPopup?.querySelector('[data-deck-field="tasks"]');
  const deckPopupDivider = deckPopup?.querySelector('.role-popup__divider');
  let lastFocusedDeck = null;

  const closeDeckPopup = () => {
    if (!deckPopup || deckPopup.hidden) {
      return;
    }
    deckPopup.hidden = true;
    deckPopup.classList.remove('is-active');
    document.removeEventListener('keydown', handleDeckPopupKeydown);
    if (deckPopupTitle) {
      deckPopupTitle.textContent = '';
      deckPopupTitle.hidden = true;
    }
    if (deckPopupTasks) {
      deckPopupTasks.replaceChildren();
      deckPopupTasks.hidden = true;
    }
    if (deckPopupDivider) {
      deckPopupDivider.hidden = true;
    }
    if (lastFocusedDeck instanceof HTMLElement) {
      lastFocusedDeck.focus({ preventScroll: true });
    }
    lastFocusedDeck = null;

    let eventResolved = false;
    if (currentEvent && lastOpenedDeckType === 'auxiliary') {
      currentEvent = null;
      turnsUntilEvent = getRandomIntInclusive(3, 6);
      eventResolved = true;
    }

    lastOpenedDeckType = null;

    if (players.length > 0) {
      if (!eventResolved) {
        turnsUntilEvent = Math.max(turnsUntilEvent - 1, 0);
      }

      if (turnsUntilEvent <= 0 && !currentEvent) {
        currentEvent = Math.random() < 0.5 ? 'ritual' : 'mystery';
        turnsUntilEvent = 0;
      }

      const nextIndex = (activePlayerIndex + 1) % players.length;
      setActivePlayer(nextIndex);

      if (!currentEvent && turnsUntilEvent === 0) {
        turnsUntilEvent = getRandomIntInclusive(3, 6);
      }
    }
  };

  const handleDeckPopupKeydown = (event) => {
    if (event.key === 'Escape') {
      event.preventDefault();
      closeDeckPopup();
    }
  };

  const openDeckPopup = (trigger) => {
    if (!deckPopup || !deckPopupTitle || !deckPopupTasks) {
      return;
    }

    const title = typeof trigger.dataset.deckTitle === 'string' ? trigger.dataset.deckTitle.trim() : '';
    const content = typeof trigger.dataset.deckContent === 'string' ? trigger.dataset.deckContent.trim() : '';

    if (trigger.classList.contains('game-deck--auxiliary')) {
      lastOpenedDeckType = 'auxiliary';
    } else {
      lastOpenedDeckType = 'main';
    }

    deckPopupTitle.textContent = title;
    deckPopupTitle.hidden = title.length === 0;

    deckPopupTasks.replaceChildren();
    if (content.length > 0) {
      const paragraph = document.createElement('p');
      paragraph.className = 'game-deck-popup__text';
      paragraph.textContent = content;
      deckPopupTasks.append(paragraph);
      deckPopupTasks.hidden = false;
    } else {
      deckPopupTasks.hidden = true;
    }

    if (deckPopupDivider) {
      deckPopupDivider.hidden = deckPopupTitle.hidden && deckPopupTasks.hidden;
    }

    deckPopup.hidden = false;
    deckPopup.classList.add('is-active');
    document.addEventListener('keydown', handleDeckPopupKeydown);

    lastFocusedDeck = trigger;

    const closeButton = deckPopup.querySelector('.role-popup__close');
    if (closeButton instanceof HTMLElement) {
      closeButton.focus({ preventScroll: true });
    }
  };

  if (deckPopup && deckButtons.length > 0) {
    deckPopup.hidden = true;
    if (deckPopupTitle) {
      deckPopupTitle.hidden = true;
    }
    if (deckPopupTasks) {
      deckPopupTasks.hidden = true;
    }
    if (deckPopupDivider) {
      deckPopupDivider.hidden = true;
    }

    deckButtons.forEach((deckButton) => {
      deckButton.addEventListener('click', () => {
        const deckId = typeof deckButton.dataset.gameDeck === 'string' ? deckButton.dataset.gameDeck.trim() : '';
        let popupContent = '';

        if (deckId.length > 0) {
          const card = drawCardFromDeck(deckId);
          if (card && typeof card.question === 'string') {
            popupContent = card.question.trim();
          } else if (deckDefinitions[deckId]) {
            popupContent = '–í —ç—Ç–æ–π –∫–æ–ª–æ–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç.';
          }
        }

        deckButton.dataset.deckContent = popupContent;

        openDeckPopup(deckButton);
      });
    });

    deckPopup.addEventListener('click', (event) => {
      const target = event.target instanceof HTMLElement ? event.target.closest('[data-close-popup]') : null;
      if (target) {
        event.preventDefault();
        closeDeckPopup();
      }
    });
  }

  if (finishBtn) {
    finishBtn.addEventListener('click', () => {
      const target = finishBtn.dataset.next;
      if (!target) {
        return;
      }
      const resolved = new URL(target, window.location.href);
      window.location.assign(resolved.href);
    });
  }

  setActivePlayer(0);
});
